;; -*- Mode:LISP; Syntax:Common-Lisp; Package:(boxer :use (lisp) :nicknames (box)); -*-#| $Header: pkg.lisp,v 1.0 90/01/24 22:15:38 boxer Exp $ $Log:	pkg.lisp,v $;;;Revision 1.0  90/01/24  22:15:38  boxer;;;Initial revision;;; Copyright 1986 - 1998 Regents of the University of California Additional Portions Copyright 1998 - 2006 PyxiSystems LLC                                         +-Data--+                This file is part of the | BOXER | system                                         +-------+  This file contains package declarations for the Boxer System  It is loaded from inside the boxsys.lisp file  At the moment, Boxer has 3 sub packages, the Boxer-window package (BW)   which contains window system specific routines that boxer uses;  the EVAL package which contains the evaluator and utilities which it  uses, and the BOXER-USER (BU) package which is the package that all   boxer user code is in.Modification History (most recent at top) 2/01/06 handle possible list in *WINDOW-SYSTEM-INTERFACE-PACKAGE* when creating         boxer-window package 2/10/03 changed references to LISP package in package defs to COMMON-LISP for MCL5.0 4/17/02 added char-case to boxer package exports 4/16/02 added intern-keyword to boxer package exports 4/10/02 new string-case macro, added more symbols to boxer package exports 8/15/99 started adding lispworks changes|##-(or lispm mcl lispworks) (in-package 'boxer :use '(lisp) :nicknames '(box))#+(or mcl lispworks) (in-package :boxer);;;;;; This is the package the Object Oriented Extension to Common Lisp;;;;; Now it should be safe to...#+pcl (use-package 'pcl)#+(and clos (not pcl))(use-package 'clos);;;; Set up the packages that we will be using;; Symbols in the boxer package that we want others to see(export '(recompile-boxer load-boxer make-boxer start-boxer boxer));;;; DEFSUBST (some implementation have it and others don't)#+lispm(import 'lt::defsubst)#+lucid(import 'lucid::defsubst);;; this is actually straight CL, but somebody undid it last time I put it in the system. --mt#+mcl(defmacro defsubst (name args &body body)  `(progn     (declaim (inline ,name))            (defun ,name ,args       ,@body)))#+MCL(unless (member :mcl-appgen *features*)  (pushnew "subst"            (cdr (assoc 'function ccl::*define-type-alist*))));; the ExCl version of defsubst is in macros#-(or lucid lispm excl)(DEFMACRO DEFSUBST (NAME LL &BODY BODY)  `(DEFUN ,NAME ,LL ,@BODY))#+mcl(import 'CCL::NEQ);;; useful symbols from the boxer pkg (mostly from macros.lisp);;; that we want ALL other packages to see.  There are import ;;; statements below for specific symbols that should be seen;;; in specific packages(export '(fix fixr  +&  fixnum-plus  -&  fixnum-minus  *&  fixnum-times	  =&  fixnum-=  <&  fixnum-<  >&  fixnum->  <=&  fixnum-<=	  >=&  fixnum->=  1+&  1-&  zerop&  max&  min&  svref& incf& decf&          float-plus float-minus float-times          ldb& dpb& logior& logand& logxor&	  defsubst dotimes&	  barf with-collection collect neq sind cosd          fast-delq fast-memq fast-assq	  between inclusive-between? intern-keyword symbol-format           string-case char-case))(shadow 'boxer::once-only (find-package 'boxer))#+clx(shadow '(boxer::draw-line boxer::draw-rectangle) (find-package 'boxer))#+lucid(shadow 'boxer::bps (find-package 'boxer))#+LISPM(IMPORT 'SI:DEFPROP)#-LISPM(DEFMACRO DEFPROP (SYM VALUE INDICATOR)  `(SETF (GET ',SYM ',INDICATOR) ',VALUE))#+pcl(import '(pcl::allocate-instance));;;;;; This is the Boxer User's Package.;;;#+lispm(si:defpackage boxer-user (:use)            (:nicknames bu boxer-users pkg-bu-package pkg-boxer-user-package)	    (:export "true" "false" "input" "inputs" ""))#-lispm(unless (packagep (find-package 'boxer-user))  (make-package 'boxer-user	        :nicknames '(bu boxer-users pkg-bu-package			     pkg-boxer-user-package)	        :use nil));; external symbols that we need to reference from BOXER;; the symbols must be present before we export them;; :: won't create the symbol.#-lispm(export '(bu::input bu::inputs bu::true bu::false bu::port-to bu::datafy)	(find-package 'boxer-user));; Some useful variables and functions for dealing with the BU package(defvar pkg-boxer-user-package (find-package 'boxer-user))(defvar pkg-bu-package (find-package 'boxer-user));;;; Setting Up the Window System Package;;;;;;  This relies on the result of (get-window-system-info) defined ;;;  and called in boxsys;;;;;;  All of this is done HERE to insure a consistent LOAD and COMPILE time ;;;  package Environment.  Putting all this info in the relevant files leads ;;;  to obscure package lossage.  Sigh.(UNLESS (PACKAGEP (FIND-PACKAGE 'BOXER-WINDOW))  (MAKE-PACKAGE 'BOXER-WINDOW	        :NICKNAMES '(BW)	        :USE (if (listp *WINDOW-SYSTEM-INTERFACE-PACKAGE*)                         `(,@*WINDOW-SYSTEM-INTERFACE-PACKAGE* COMMON-LISP BOXER)                       `(,*WINDOW-SYSTEM-INTERFACE-PACKAGE* COMMON-LISP BOXER))));; Inherit External Symbols from BW(USE-PACKAGE 'BOXER-WINDOW);; These symbols are the interface between the window system and BOXER;; Look at the beginning of the DRAW.LISP file for more interface and some ;; definitions too.;; Most of the Boxer Redisplay talks to a virtual bitmap.  These functions ;; are defined in the DRAW.LISP file.  The ones that actually talk to windows ;; are shown here. Mouse functions need to added here also...;;; From the draw-low-xxx files;;; What we need from BOXER;;; shadow the symbol from SCL preferring the PCL one#+symbolics(shadow 'boxer-window::once-only (find-package 'boxer-window))(import '(boxer::once-only boxer::control-character-display-prefix	  boxer::%drawing-window boxer::%drawing-array	  boxer::%drawing-font-map	  boxer::scale-x boxer::scale-y	  boxer::x-out-of-bounds? boxer::y-out-of-bounds?	  ;; font vars	  boxer::%drawing-font boxer::%drawing-fit	  boxer::%drawing-font-cha-wid	  boxer::%drawing-font-cha-hei	  boxer::%drawing-font-cha-wid-table	  ;; inits	  boxer::def-redisplay-initialization	  boxer::run-redisplay-inits	  ;; useful macros	  boxer::defsubst)	(find-package 'boxer-window));;; Things that we need that aren't exported by the X ;;; Interface (from draw-low-x.lisp)#+X(import '(xlib::x-make-window-info	  xlib::x-window-info.width xlib::x-window-info.height	  xlib::make-struct xlib::cseti-word	  xlib::XQueryWindow xlib::XStorePixmapXY xlib::XFlush	  xlib::x-font-info.id	  xlib::x-make-font-info xlib::x-font-info.fixedwidth	  xlib::x-font-info.width xlib::x-font-info.height	  xlib::XTextPad xlib::XStringWidth	  xlib::XCopyArea xlib::XPixmapPut xlib::XTileFill	  xlib::XPixSet xlib::XPixFill xlib::XLine)	(find-package 'boxer-window));;; What BOXER uses(export '(bw::alu-andca bw::alu-seta bw::alu-xor bw::alu-and bw::alu-ior bw::alu-setz   bw::*foreground-color* bw::*background-color*   bw::main-screen bw::sheet-screen-array bw::prepare-sheet   bw::sheet-font-map bw::make-pattern   bw::with-drawing-into-new-bitmap   bw::sheet-inside-left bw::sheet-inside-top   bw::sheet-inside-width bw::sheet-inside-height bw::window-inside-size   bw::window-depth bw::window-pixel   bw::%bitblt-in-screen bw::%bitblt-to-screen bw::%bitblt-from-screen   bw::%bitblt-tile-to-screen bw::%draw-point   bw::%draw-rectangle bw::%erase-rectangle bw::%draw-line bw::%draw-poly   bw::boxer-points->window-system-points bw::%draw-arc bw::%draw-filled-arc   bw::set-outermost-screen-box-in-window   bw::draw-cha bw::cha-wid bw::cha-hei   bw::%draw-cha bw::%draw-string   bw::string-wid bw::string-hei   bw::font-char-height   ;; bitmap functions   bw::make-offscreen-bitmap bw::copy-offscreen-bitmap bw::free-offscreen-bitmap   bw::offscreen-bitmap-width bw::offscreen-bitmap-height    bw::offscreen-bitmap-depth bw::with-system-dependent-bitmap-drawing   bw::with-drawing-port   bw::offscreen-bitmap-image bw::set-offscreen-bitmap-image   bw::offscreen-pixel bw::image-pixel   bw::with-window-system-dependent-clipping bw::with-turtle-clipping   bw::%draw-rectangle-on-offscreen-bitmap   bw::%draw-line-on-offscreen-bitmap   bw::draw-string-to-offscreen-bitmap   bw::rebind-font-info bw::set-font-info   bw::%make-color bw::color? bw::color= bw::with-pen-color bw::%set-pen-color   bw::%set-pen-size bw::pixel-rgb-values    bw::set-mouse-cursor bw::reset-mouse-cursor bw::with-mouse-cursor bw::beep   bw::mouse-window-coords bw::mouse-button-state    bw::deallocate-system-dependent-structures   bw::max-window-coord bw::min-window-coord) (find-package 'boxer-window));;; From the boxwin-xxx files(export '(bw::*redisplayable-windows*	  bw::outermost-screen-box	  ;; useful variables...	  bw::*boxer-pane* bw::*name-pane* bw::*boxer-frame*	  bw::*point-blinker* bw::*mouse-blinker* bw::*sprite-blinker*	  bw::mini-boxer-command-loop	  ;; Window operations	  bw::set-outermost-screen-box-in-window bw::beep	  bw::window-system-dependent-redraw-status-line bw::clear-window	  ;; input functions	  bw::get-character-input bw::get-boxer-input	  bw::get-any-event;; not used by boxer but useful for debugging	  ;; cursor and blinker manipulation	  bw::*number-of-mouse-buttons*	  bw::with-mouse-tracking	  bw::with-mouse-tracking-inside;; these  bind...	  bw::mouse-x bw::mouse-y	  bw::mouse-button-state	  bw::mouse-window-coords	  bw::warp-pointer	  bw::make-blinker bw::draw-blinker	  bw::make-region-row-blinker bw::draw-region-row-blinker	  bw::with-open-blinker bw::with-open-blinkers	  bw::set-cursorpos bw::set-cursor-size	  bw::set-cursor-visibility bw::set-window-name)	   	(find-package 'boxer-window))(import '(boxer::setup-redisplay boxer::setup-editor boxer::not-null				 boxer::redisplay boxer::handle-boxer-input				 boxer::deftype-checking-macros				 boxer::*cursor-blinker-wid*				 boxer::*cursor-blinker-min-hei*				 boxer::window-system-specific-make-boxer				 boxer::window-system-specific-start-boxer				 #+X				 boxer::*default-keymap-translation-filename*                                 boxer::status-line-display boxer::redraw-status-line                                 boxer::force-redisplay                                 ;;                                 boxer::%local-clip-lef boxer::%local-clip-top                                  boxer::%local-clip-rig boxer::%local-clip-bot                                 boxer::%origin-x-offset boxer::%origin-y-offset                                                                  ;;                                  boxer::key-event? boxer::mouse-event?                                  boxer::input-code boxer::input-bits                                 ;; dribble symbols                                 boxer::*dribble-playback*                                 boxer::update-dribble-mouse-state                                 boxer::dribble-mouse-state-x                                  boxer::dribble-mouse-state-y                                 boxer::dribble-mouse-state-buttons                                 boxer::record-mouse-state)                                 	(find-package 'boxer-window));; X Specific symbols that boxwin-x.lisp uses...#+X(import '(xlib::XOpenDisplay xlib::x-make-event	   xlib::x-display.root xlib::x-display.white xlib::x-display.black	   xlib::XCreateWindow xlib::XDestroyWindow	   xlib::XQueryFont xlib::XGetFont	   xlib::XMapWindow xlib::XMapSubwindows	   xlib::XFeep xlib::XClear xlib::XText xlib::XPending	   xlib::XSelectInput xlib::XWindowEvent)	(find-package 'boxer-window));;; from the keydef-low-xxx.lisp files;; X Specific symbols #+X(import '(xlib::x-event.type xlib::x-key-or-button-event.detail	  xlib::x-key-or-button-event.window	  xlib::x-key-or-button-event.x xlib::x-key-or-button-event.y)	(find-package 'boxer-window))(export '(bw::key-event? bw::mouse-event?	  bw::key-or-button-event? bw::key-event-values	  bw::mouse-event-window bw::mouse-event-type	  bw::mouse-event-x-pos bw::mouse-event-y-pos	  bw::mouse-event-click bw::mouse-event-bits)	(find-package 'boxer-window))(import '(bw::mouse-click-names bw::mouse-state-names bw::lookup-click-name)	(find-package 'boxer));;; most of these are either redundant or obsolete.#-LISPM(EXPORT '(BW::REGION-X BW::REGION-Y	  BW::REGION-WID BW::REGION-HEI BW::REGION-VISIBILITY	  ;; functions that let the windows do the walking	  BW::BOXER-TOP-OF-STACK-GROUP-BINDINGS)	(FIND-PACKAGE 'BOXER-WINDOW));;; Set up package for the evaluator.#+LISPM(SI:DEFPACKAGE EVAL (:USE LISP SM pcl))	       #-LISPM(UNLESS (PACKAGEP (FIND-PACKAGE "EVAL"))  (MAKE-PACKAGE "EVAL"	        :USE '(COMMON-LISP SM #+pcl pcl #+clos clos)))(export '(eval::*lexical-variables-root* eval::add-static-variable-pair 	  eval::evaluator-delete-self-action	  eval::lookup-static-variable-in-box-only	  eval::remove-static-variable	  eval::defboxer-key eval::funcall-boxer-key	  eval::set-exports	  eval::boxer-boolean	  eval::list-rest eval::numberize	  eval::set-and-save-state-variables	  eval::recursive-funcall-invoke	  eval::restore-state-variables	  eval::boxer-symeval)	(find-package "EVAL"))(import '(boxer::defsubst boxer::virtual-copy-error-clause	  boxer::with-collection boxer::collect	  ;; instance variables and generic function names	  boxer::static-variable-cache boxer::cached-code	  boxer::static-variables-alist	  ;; type checking	  boxer::fast-eval-doit-box? boxer::fast-eval-data-box?	  boxer::fast-eval-port-box? boxer::fast-eval-sprite-box?	  boxer::fast-editor-doit-box? boxer::fast-editor-data-box?	  boxer::fast-editor-sprite-box? boxer::fast-editor-port-box?	  boxer::doit-box? boxer::data-box?	  boxer::sprite-box? boxer::port-box?	  ;; other predicates	  boxer::named-box?	  ;; PCL stuff	  #+pcl  pcl::slot-value  #+pcl  pcl::defmethod	  #+pcl  pcl::bcm-class-and-instantiable-superiors-symbol	  #+pcl  pcl::allocate-instance	  #+clos clos::slot-value #+clos clos::defmethod	  #+clos clos::bcm-class-and-instantiable-superiors-symbol	  ;; Boxer/CL fixup	  boxer::fast-assq boxer::fast-delq	  boxer::fast-del-if boxer::fast-memq          #+(or lispworks mcl) boxer::compiler-let)	(find-package 'eval))(import '(boxer::fix boxer::fixr boxer::symbol-format	  boxer::+& boxer::-& boxer::*&	  boxer::=& boxer::<& boxer::>&	  boxer::<=& boxer::>=&	  boxer::/=&	  boxer::1+& boxer::1-&	  boxer::incf& boxer::decf&	  boxer::zerop& boxer::svref& boxer::dotimes& boxer::svlength)	'eval)#+lispworks(shadow 'eval::debug (find-package :eval))(import '(eval::defboxer-key eval::defboxer-primitive ; Until Lucid fixes the DEFSTRUCT lossage you have to be in the EVAL package; when doing defrecursive-*-primitives.;;        eval::defrecursive-funcall-primitive;;	  eval::defrecursive-eval-primitive	  eval::set-exports)	(find-package 'boxer));;; Set up package for the boxer network.#+lispm(si:defpackage boxnet (:use lisp sm #+pcl pcl #+clos clos boxer))	       #-LISPM(unless (packagep (find-package "BOXNET"))  (make-package "BOXNET"	        :use '(common-lisp sm #+pcl pcl #+clos clos boxer)))(import '(boxer::wait-with-timeout boxer::storage-chunk?	  boxer::*outermost-dumping-box* boxer::*initial-box*	  boxer::getprop boxer::removeprop boxer::read-only-box?	  boxer::dump-boxer-thing boxer::putprop boxer::load-box-on-login?	  boxer::superior-box boxer::box? boxer::fast-delq boxer::superior?	  boxer::link-target boxer::link-port boxer::link-type	  boxer::contained-links boxer::branch-links	  boxer::port-branch-link boxer::target-branch-link	  boxer::set-port-to-box boxer::plist	  boxer::inferior-link boxer::dump-list-preamble	  boxer::deffile-property-handler boxer::box-text-string box::make-vc	  boxer::find-lowest-common-superior-box	  eval::defboxer-primitive eval::primitive-signal-error	  eval::signal-error eval::true? eval::false?	  boxer::enter boxer::point-box boxer::box? boxer::virtual-copy	  boxer::*boxer-version-info* boxer::redraw-status-line	  boxer::box-text-string boxer::setup-editor boxer::*initial-box*	  boxer::make-box boxer::shrink boxer::box-or-port-target          boxer::append-row boxer::make-row	  boxer::storage-chunk? boxer::display-style boxer::set-display-style          #+(or lispworks mcl) boxer::block-compile-class	  boxer::modified boxer::name-string          boxer::dump-plist-internal boxer::dump-plist-length          boxer::ut-day boxer::ut-month boxer::ut-tz)	'boxnet)(export '(boxnet::fill-box-from-server boxnet::fill-box 	  boxnet::storage-chunk-plist-half-length	  boxnet::dump-storage-chunk-plist-items	  boxnet::cross-file-port?	  boxnet::*dump-out-file-box-inferiors?*	  boxnet::in-bfs-environment?	  boxnet::no-inferiors-for-file?	  boxnet::dump-cross-file-port-reference	  boxnet::load-server-box-id	  boxnet::load-cross-file-contained-links	  boxnet::load-cross-file-port-branch-links	  boxnet::load-cross-file-target-branch-links	  boxnet::load-cross-file-target-ends	  boxnet::load-cross-file-link-id	  boxnet::no-cross-file-links?	  boxnet::cross-file-link-insert-self-action	  boxnet::cross-file-link-delete-self-action	  boxnet::cross-file-port-insert-self-action	  boxnet::cross-file-port-delete-self-action	  boxnet::cross-file-port-branch-links	  boxnet::articulate-target-branch          boxnet::dump-box-url boxnet::load-url boxnet::url-string?          boxnet::url-box? boxnet::read-internal-url)	(find-package 'boxnet))(use-package 'boxnet);; redefined in file-prims#+mcl(shadow 'boxer::file-write-date)#+(and ccl-3 mcl (not powerpc) (not ccl-3.1))(shadow 'bw::beep);;; The shadowing in-line in MCL-PRELUDE no longer works, so do it here.#+(or MCL lispworks) (shadow '(cl:defclass cl:defmethod cl:slot-value cl:with-slots))#+(or mcl lispworks) (shadowing-import '(box::defclass box::defmethod box::slot-value box::with-slots)                                       (find-package :boxnet))